// GiftFlow Database Schema
// Tax-deductible wish platform connecting Patrons (donors) with Charities (recipients)

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles and authentication
model User {
  id            String   @id @default(uuid())
  clerkUserId   String   @unique @map("clerk_user_id")
  roles         Json     // {charity: bool, patron: bool, moderator: bool, admin: bool}
  displayName   String?  @map("display_name")
  city          String?
  emailVerified Boolean  @default(false) @map("email_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  wishesAsCharity Wish[]           @relation("CharityWishes")
  fulfillments     Fulfillment[]    @relation("PatronFulfillments")
  analytics        AnalyticsSnapshot[] @relation("PatronAnalytics")
  auditLogs        AuditLog[]       @relation("ActorAuditLogs")

  @@map("users")
}

// Wish types: Pre-Verified (curated) or Custom (requires verification)
model Wish {
  id                   String   @id @default(uuid())
  charityId           String   @map("charity_id")
  type                 WishType
  title                String
  description          String
  city                 String
  amountCents          Int?     @map("amount_cents") // nullable for in-kind
  status               WishStatus @default(DRAFT)
  verificationDecision Json?    @map("verification_decision") // {result: 'eligible|reject|review', reasons: string[], policy_refs: string[]}
  tags                 String[] // ["medical", "women-in-engineering", "southern-maryland", "education"]
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  charity     User              @relation("CharityWishes", fields: [charityId], references: [id])
  documents    WishDocument[]
  fulfillments Fulfillment[]

  @@map("wishes")
}

// Documents uploaded for custom wish verification
model WishDocument {
  id        String       @id @default(uuid())
  wishId    String       @map("wish_id")
  url       String
  docType   DocumentType @map("doc_type")
  ocrText   String?      @map("ocr_text")
  hash      String       // for duplicate detection
  createdAt DateTime     @default(now()) @map("created_at")

  // Relations
  wish Wish @relation(fields: [wishId], references: [id], onDelete: Cascade)

  @@map("wish_documents")
}

// Fulfillment tracking
model Fulfillment {
  id           String           @id @default(uuid())
  wishId       String           @map("wish_id")
  patronId     String           @map("patron_id")
  amountCents  Int              @map("amount_cents")
  provider     PaymentProvider
  status       FulfillmentStatus @default(INITIATED)
  receiptUrl   String?          @map("receipt_url")
  taxDocsUrl   String?          @map("tax_docs_url")
  createdAt    DateTime         @default(now()) @map("created_at")

  // Relations
  wish   Wish @relation(fields: [wishId], references: [id])
  patron User @relation("PatronFulfillments", fields: [patronId], references: [id])

  @@map("fulfillments")
}

// Analytics snapshots for patrons
model AnalyticsSnapshot {
  id         String   @id @default(uuid())
  patronId   String   @map("patron_id")
  periodStart DateTime @map("period_start")
  periodEnd   DateTime @map("period_end")
  totals     Json     // summary totals
  breakdowns Json     // breakdowns by tags/demographics/purpose/city
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  patron User @relation("PatronAnalytics", fields: [patronId], references: [id])

  @@map("analytics_snapshots")
}

// Audit logging for compliance
model AuditLog {
  id           String   @id @default(uuid())
  actorUserId  String   @map("actor_user_id")
  entityType   String   @map("entity_type") // 'wish', 'user', 'fulfillment', etc.
  entityId     String   @map("entity_id")
  action       String   // 'create', 'update', 'delete', 'approve', 'reject'
  details      Json     // action-specific details
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  actor User @relation("ActorAuditLogs", fields: [actorUserId], references: [id])

  @@map("audit_logs")
}

// Enums
enum WishType {
  PREVERIFIED
  CUSTOM
}

enum WishStatus {
  DRAFT
  UNDER_REVIEW
  ELIGIBLE
  REJECTED
  FULFILLED
  CLOSED
}

enum DocumentType {
  INVOICE
  ESTIMATE
  MEDICAL
  ENROLLMENT
  OTHER
}

enum PaymentProvider {
  STRIPE
  DIRECT_VENDOR
  MANUAL_CHECK
}

enum FulfillmentStatus {
  INITIATED
  SUCCEEDED
  FAILED
  REFUNDED
}
